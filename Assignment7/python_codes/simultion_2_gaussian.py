# -*- coding: utf-8 -*-
"""Gaussian.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuRx48HS5jYRKl_gMizqMqS71cQ8qLQC
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
from collections import Counter

cov1 = [[0.3, 0], [0, 0.3]]

#Normal Random variables Generation on 4 corners of unit square
x1,y1 = np.random.multivariate_normal((0,0), cov1,100).T
plt.figure(1)
plt.title("Normal random variables")
plt.plot(x1, y1, '.',color='blue',label='data1')

x2, y2 = np.random.multivariate_normal((0,1), cov1,100).T

plt.plot(x2, y2, '.',color='red',label='data2')



x3, y3 = np.random.multivariate_normal((1,0), cov1,100).T
plt.plot(x3, y3, '.',color='green',label='data3')


x4, y4 = np.random.multivariate_normal((1,1), cov1,100).T
plt.plot(x4, y4, '.',color='yellow',label='data4')


#To prove sum of normal random variables is also gaussian
#cov2=cov1+cov1 #Since random variables x and y are independent
cov2=[[0.6, 0], [0, 0.6]]

xs1, ys1 = np.random.multivariate_normal((0,0), cov2, 100).T
plt.figure(2)
plt.title("Sum of 2 normal random variables")
plt.plot(xs1, ys1, '.',color='blue',label='data1')

xs2, ys2 = np.random.multivariate_normal((0,2), cov2, 100).T

plt.plot(xs2, ys2, '.',color='red',label='data2')



xs3, ys3 = np.random.multivariate_normal((2,0), cov1, 100).T
plt.plot(xs3, ys3, '.',color='green',label='data3')


xs4, ys4 = np.random.multivariate_normal((2,2), cov2, 100).T
plt.plot(xs4, ys4, '.',color='yellow',label='data4')
sample_size= 1000


#Simulations using Gaussian R.V:
sample_X=np.random.multivariate_normal((0,0), cov1,1000).T
sample_Y=np.random.multivariate_normal((0,0), cov1,1000).T

#sample_X= np.random.normal(mu1,sigma1, sample_size)
#sample_Y= np.random.normal(mu2, sigma2, sample_size)

#finding individual mean and variances:
mean_X = np.mean(sample_X)
var_X = np.var(sample_X)
mean_Y = np.mean(sample_Y)
var_Y = np.var(sample_Y)
mean_added = mean_X+mean_Y
var_added = var_X+var_Y
sd = np.sqrt(var_added)
plt.figure(4)
plt.plot(sample_X,label='sample random variables')
sample_U=np.random.multivariate_normal((0,0), cov2,1000).T
plt.plot(sample_U,label='summed random variables')
plt.title("Sample set")
#plt.legend()
#print(sample_X)
#print(sample_Y)

#adding individual gaussian r.v and forming new transformed r.v
U=[]
U=sample_X+sample_Y
    
U = np.array(U)
 
#finding mean and var of the transformed r.v 
mean_U= np.mean(U)
var_U = np.var(U)

#finding pdf:
f_U = (1.0/ math.sqrt(2*np.pi*var_U))*np.exp(-(U-mean_U)*2/(2*var_U))

#printing all the mean and variances:
print("mean and var of sample_X are: ", mean_X,"and", var_X)
print("mean and var of sample_Y are: ", mean_Y,"and", var_Y)
print("sum of individual means and variances of simulated X and Y: ", mean_added ,"and", var_added )
print("mean and var of transformed R.V. U are: ", mean_U, var_U)

#simulating new gaussian with theoritical mean and variances:
#sample_U= np.random.normal(combined_mu, combined_sigma , sample_size)
sample_U=np.random.multivariate_normal((0,0), cov2,1000).T
mean_sample_U = np.mean(sample_U)
var_sample_U = np.var(sample_U)

#finding pdf of simulated U:
f_sample_U = (1.0/ math.sqrt(2*np.pi* var_sample_U))*np.exp(-(sample_U- mean_sample_U)*2/(2*var_sample_U))
    
#print("generated new gaussian mean and var are: ", mean_sample_U, "and", var_sample_U )
    
##plotting
plt.figure(3)
plt.scatter(U, f_U, marker =".", color= 'r', label='mathematical')
plt.scatter(sample_U, f_sample_U, marker =".", color= 'cyan', label='simulated')
plt.legend()
plt.xlabel('U')
plt.ylabel('pdf of U: f(U)')
plt.xlim(0,7.5)
plt.ylim(0,.5)
plt.show()

plt.show()
